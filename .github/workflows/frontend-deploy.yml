name: Frontend Deploy

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'interview-frontend/**'
      - 'dashboard-frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  pull_request:
    branches:
      - main
      - development
    paths:
      - 'interview-frontend/**'
      - 'dashboard-frontend/**'

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1

jobs:
  deploy-interview-frontend:
    name: Deploy Interview Frontend
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'interview-frontend/') || contains(github.event.head_commit.added, 'interview-frontend/') || github.event_name == 'pull_request'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: interview-frontend/package-lock.json

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Dependencies
        working-directory: ./interview-frontend
        run: npm ci

      - name: Build React App
        working-directory: ./interview-frontend
        env:
          REACT_APP_API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.verita-ai.com' || 'https://staging.api.verita-ai.com' }}
          NODE_ENV: production
        run: npm run build

      - name: Get S3 Bucket Name
        id: get-bucket
        run: |
          ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
          BUCKET_NAME="verita-ai-interview-interview-${ENVIRONMENT}"
          echo "bucket_name=${BUCKET_NAME}" >> $GITHUB_OUTPUT
          echo "Deploying to bucket: ${BUCKET_NAME}"

      - name: Sync to S3
        working-directory: ./interview-frontend
        run: |
          aws s3 sync build/ s3://${{ steps.get-bucket.outputs.bucket_name }}/ \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html" \
            --exclude "asset-manifest.json"

          aws s3 cp build/index.html s3://${{ steps.get-bucket.outputs.bucket_name }}/index.html \
            --cache-control "public, max-age=0, must-revalidate"

          aws s3 cp build/asset-manifest.json s3://${{ steps.get-bucket.outputs.bucket_name }}/asset-manifest.json \
            --cache-control "public, max-age=0, must-revalidate"

      - name: Get CloudFront Distribution ID
        id: get-cloudfront
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Origins.Items[0].DomainName=='${{ steps.get-bucket.outputs.bucket_name }}.s3.amazonaws.com'].Id" \
            --output text)
          echo "distribution_id=${DISTRIBUTION_ID}" >> $GITHUB_OUTPUT
          echo "CloudFront Distribution ID: ${DISTRIBUTION_ID}"

      - name: Invalidate CloudFront Cache
        if: steps.get-cloudfront.outputs.distribution_id != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get-cloudfront.outputs.distribution_id }} \
            --paths "/*"

      - name: Deployment Summary
        run: |
          echo "## Interview Frontend Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}" >> $GITHUB_STEP_SUMMARY
          echo "**S3 Bucket:** \`${{ steps.get-bucket.outputs.bucket_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**CloudFront ID:** \`${{ steps.get-cloudfront.outputs.distribution_id }}\`" >> $GITHUB_STEP_SUMMARY

  deploy-dashboard-frontend:
    name: Deploy Dashboard Frontend
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'dashboard-frontend/') || contains(github.event.head_commit.added, 'dashboard-frontend/') || github.event_name == 'pull_request'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: dashboard-frontend/package-lock.json

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Dependencies
        working-directory: ./dashboard-frontend
        run: npm ci

      - name: Build React App
        working-directory: ./dashboard-frontend
        env:
          REACT_APP_API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.verita-ai.com' || 'https://staging.api.verita-ai.com' }}
          NODE_ENV: production
        run: npm run build

      - name: Get S3 Bucket Name
        id: get-bucket
        run: |
          ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
          BUCKET_NAME="verita-ai-interview-dashboard-${ENVIRONMENT}"
          echo "bucket_name=${BUCKET_NAME}" >> $GITHUB_OUTPUT
          echo "Deploying to bucket: ${BUCKET_NAME}"

      - name: Sync to S3
        working-directory: ./dashboard-frontend
        run: |
          aws s3 sync build/ s3://${{ steps.get-bucket.outputs.bucket_name }}/ \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html" \
            --exclude "asset-manifest.json"

          aws s3 cp build/index.html s3://${{ steps.get-bucket.outputs.bucket_name }}/index.html \
            --cache-control "public, max-age=0, must-revalidate"

          aws s3 cp build/asset-manifest.json s3://${{ steps.get-bucket.outputs.bucket_name }}/asset-manifest.json \
            --cache-control "public, max-age=0, must-revalidate"

      - name: Get CloudFront Distribution ID
        id: get-cloudfront
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Origins.Items[0].DomainName=='${{ steps.get-bucket.outputs.bucket_name }}.s3.amazonaws.com'].Id" \
            --output text)
          echo "distribution_id=${DISTRIBUTION_ID}" >> $GITHUB_OUTPUT
          echo "CloudFront Distribution ID: ${DISTRIBUTION_ID}"

      - name: Invalidate CloudFront Cache
        if: steps.get-cloudfront.outputs.distribution_id != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get-cloudfront.outputs.distribution_id }} \
            --paths "/*"

      - name: Deployment Summary
        run: |
          echo "## Dashboard Frontend Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}" >> $GITHUB_STEP_SUMMARY
          echo "**S3 Bucket:** \`${{ steps.get-bucket.outputs.bucket_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**CloudFront ID:** \`${{ steps.get-cloudfront.outputs.distribution_id }}\`" >> $GITHUB_STEP_SUMMARY
