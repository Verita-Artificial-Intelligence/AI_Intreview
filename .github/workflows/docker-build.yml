name: Docker Build & Push

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'

permissions:
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: verita-backend

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Image to ECR
        id: image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
        run: |
          # Build image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT-latest \
            ./backend

          # Push all tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT-latest

          # Output image URI for next step
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Update ECS Service (Dev)
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: |
          aws ecs update-service \
            --cluster verita-ai-interview-cluster \
            --service verita-ai-interview-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "‚úì Dev ECS service updated to pull latest image"

      - name: Update ECS Service (Prod)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          aws ecs update-service \
            --cluster verita-ai-interview-cluster \
            --service verita-ai-interview-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "‚úì Prod ECS service updated to pull latest image"

      - name: Print Image URI
        run: |
          echo "## Docker Image Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image URI:** \`${{ steps.image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}-latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Notify Slack
        if: github.event_name == 'push'
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "Docker Image Built",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üê≥ Docker Image - ${{ job.status }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Image:*\nverita-backend"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Tag:*\n${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\n${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n${{ job.status }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Image URI:*\n`${{ steps.login-ecr.outputs.registry }}/verita-backend:${{ github.sha }}`"
                  }
                }
              ]
            }
          continue-on-error: true
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Tests in Docker
        working-directory: ./backend
        run: |
          docker build -t test-image --target test .
          docker run --rm test-image

      - name: Run Linting in Docker
        working-directory: ./backend
        run: |
          docker build -t lint-image --target lint .
          docker run --rm lint-image
        continue-on-error: true
